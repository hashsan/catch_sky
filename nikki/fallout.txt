＃ここはフォールアウトのCSSのためのスペース。
フォールアウトとは、ゲームである。
実はゲームに興味があるのではなく、そこで使われている端末が大変よろしい。
ので、それを「ハックする！」
ためのスペース、資料です。ここは。

＃まず背景について。
フォールアウトの背景は、これはゲームの方ではなく、ロボコの方だけども。
ああ、ロボコっていうのは、ターミナルの名前です。
大変雰囲気があってよろしいとされている、それな。
で、端末の背景は基本はダークグリーン。
カラーコードでいうと
---
#132
---
か
---
#133
---
よりグリーンを好むのであれば、RGBの青を少し削った「#132」だろう。


＃次に走査線のオンボロ。
難易度は急に上がるぞ。
そう、古い端末には、とくにCRTなんかには、走査線があって、これは豆電球を左上から右下に点灯する仕組みなので、荒い豆電球だと、描画跡が残るのです。
もちろん、ここでいう豆電球っていうのは、今の時代なら、親指の先に千以上詰め込まれているものだからな。
とまあ、どんどんわけわからんくらい小さくなってるけれども、一昔前は豆電球だったので、走査線が見えるのです。
なんといっても、最低、秒間６０回描写だからな。
主にテレビレベルだと。
これを、現代技術でもってレトロ化する。
古き良き時代か、は、ともかく「CSSでデキルヨ！」
上から下にエフェクトをかければいいわけだ。
キーフレーム的な話ですね。
「まずは、走査線を動かすキーフレームを作る」
これ！
---
        @keyframes scanline {
            0% {
                transform: translateY(-100%);
            }
            100% {
                transform: translateY(0);
            }
        }
---
何してるのかというと、とあるものを、上から下に動かしてますね。
とあるものは何でもいいので、覚えておくと走査線以外にも使えます。
よく見ると、Y軸方向に対して、戻っていますね。マイナスひゃくだから。
「プラスじゃだめなの？」
みたいな話だけれど、これは適用する要素のアフター要素につけているので、その要素の末尾から始まるので、要素の大きさのマイナスひゃくすると、その要素の一番上から始まるということになります。
ビフォアを使うと、マイナスいらないよ。
ポイントはコンテナですね。このコンテナは、DIVでもIMGでも良かったりします。
「そして、だいたいアフター要素ってのは何もついてないからな！」
競合しないという意味でアフター要素にくっつけます。
じゃあラインの方。
---
        .container:after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, rgba(255,255,255,0) 90%, rgba(37, 64, 45, 0.25) 100%);
            animation-duration: 3s;
            animation-name: effect;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
            z-index: 1;
        }
---
「難易度上がった！」
まあ、ひとつずつ見ていこうか。まずは、コンテンツ。疑似要素なので実態ないと困ります。みたいなよく見かける話。というかこれを書いておくと「ああ疑似要素か」みたいなことが何となく分かる。
次に、アブソリュート指定されているので、このコンテナサンには、リレイティブしないといけないね。
「じゃないとボディ要素の一番上にひっつくからな！」
もちろん、何度も見た。この現象。
「アブソリュートしてたら、リレイティブを探せ！」
「標語！」
じゃあ次、位置。位置は左上から。
---
top:0;
left:0;
---
「走査線は左上からだ！」
というか「アブソリュートなので位置指定必須！」
ぐらいな感覚が欲しい。
「ハックって勉強になるなあ！」
さて。アブソリュートさんなので、サイズを指定しないといけません。サイズは疑似要素なので、大本のサイズを参照しましょう。
そして次、来た。本命。
「リニアグラディアントさんだよ！」
---
background:linear-gradient(deg,colorA,colorB);
---
はい、これ構文。リニアグラディアント呼んで、角度指定して、この色からこの色。まあ幾つでも色は可能だけど、まずは二色から覚えていこ。
では、構文を覚えたところで、実際の走査線のそれ。
---
background: linear-gradient(to bottom, rgba(255,255,255,0) 90%, rgba(37, 64, 45, 0.25) 100%);
---
まずは、下にいけよ。角度ではなく、アルファベット指定でした。もちろん、下にいけよは、垂直方向だから、角度0degでもいいよ。１８０degで反転する。
しかし、まあ、これは歴史的な経緯だけれども、リニアグラディアントさんは、ブラウザごとに仕様はカオスになっているので、注意。
「色はRGBAが安心！」
ですね。まあ、まずはHEXで書いて、あとで直すといい。
色指定の次には、パーセンテージ指定されています。

＃まだ背景しか出来てない件。
---
background:#hogehoge;
---
してたって、雰囲気のあるものは作れない。
ひとつずつっすね。

＃さて、文字について。
まずは、フォントファミリーからいくぞ。
フォントファミリーはフォールアウトでは独自のものが使われているけれども、グーグルフォントで近いものを探すとする。
グーグルフォントで近いものは、ずばりこれだ！
「」

＃次にホロウ
文字はまずホロウを入れる。ホロウというのは、ティクトックでいうところの、青と赤のズレですね。

