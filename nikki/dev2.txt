＃モジュールの切り分けについて。
クラスにして、カプセル化できると便利なので、できる限りカプセル化する。
その際に重要となってくるのは、インポートだろう。
「インポートを極めなければならない！」
っていうか、これは開発の主体ではなく、日記の方に書くか。
今日は？
＠日記（#20231112.txt）

＃モジュールの切り分けな。
とりあえず、現状のモジュールについて。全体像。
単純に言葉でつらつらいうと。インデックスエイチティーエムエルがあって、その中で、ハッシュサンというハッシュの変更を検知して関数を叩くトリガーがあって、このトリガーをうまく使えば、ハッシュタグで、アンカーリンクという名前でもいいけれど、アンカーリンクで、ブログっぽいの書ける。「いくらでもファイル生成できる！」
これはURLに「＃」つけてファイル名にすれば、いつでもファイル作成って感じな。
これは大変便利。
ということで、開発されています。
んで、その中で、ジットハブをストレージにしているので、ジットハブに関する情報を、キャッチスカイというクラスが担当して、これが全体を統括している。そこで、一番コアな部分がエディタで、大変な部分それで、分類するとこれくらいか。
あとは、インデックスとヘルプか。ヘルプは認証のこと。
---
index.html
  hashsan
  CatchSky
    renderEditor
       EditorFrame
    renderIndex
    renderHelp
---
な内部構造。すべてインデックスに収めているが。
index.htmlは基本いじらないようにして、モジュールを切り分けて、クラスにして、クラスの変更で、修正できるとよい。
「バグはindex.htmlに影響を及ぼさない！」
とすれば、それがいいだろう。
あんまりファイル増やしたくないが。。。
https://i.pinimg.com/564x/0e/86/6b/0e866b51f79b1688a65e8f87053c44c8.jpg
「（これプロ）」


＃まずは、レンダーインデックスとレンダー記事は別々にいしょうね。
レンダーエディタじゃなかった。レンダーKIJIな。

＃解決策。アウェイトインポート。
問題は、ソースの先頭行で宣言しなければいけないことだった。
というのを解決する手段は、アウェイトインポートだ。
---
const {Config } = await import('Config.js')
---
「素晴らしい！」
どこで、何を呼ぶのか、わからなくなりそうだが、パーツパーツで切り出す時にこれ以上のものはない。
というので、多分可能だろうから、少し練習してみる。
大事なのは、行頭でインポートしないことだ。


