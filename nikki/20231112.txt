＃認証したらイケる問題。
ランチドしたが、最初で問題。
認証したらリロードしないと、エディタが起動しない。
理由はいまいちだが、isauthがfalseになっているような、なっていないような。
モジュール内過ぎて、デバッグが難しい件もどうにかしたい。
セーブした。
これで新しいファイルができればOK。というができるだろう。

＃以後開発関連に関して
は。「dev1.txt」から始める。

＃インポートを極める。
モジュールの分割が検討課題にあがったので、インポートを極めなければならないな。
インポートというのは、これのこと。
---
//p1
import "korega_import.js"
---
とか
---
//p2
import korega_import from "korega_import.js"
---
とか
---
//p3
import {korega_import} from "korega_import.js"
---
とか
---
//p4
import('korega_import.js').then(mod=>{
 const {korega_import} = mod
})
---
これくらいだな。
それぞれ解説。というか、自分の知ってる範囲内で。

＃とりあえずみんなデフォルトでエクスポートしているだろうっ！
というのに、対応するのは「p2」
「p2」は。
---
import korega_import from "korega_import.js"
---
対応するエクスポートは。
---
export default korega_import
---
とりあえず、名前は勝手につけてね、読み込んだら、これが表示されますから。っていうときは、ムスタングをつけないで、ベタベタインポートします。
「インポートはデフォルトを改名して使って下さい。インポートした場合のデフォルトは、これがインポートになります！」
関数でもオブジェクトでも変数でもよい。
https://i.pinimg.com/564x/21/b5/fd/21b5fd02e7a03fd508712899f0cb9cff.jpg
「ムスタングというのは{}だぞ」
「あと、お前の腰ベルト切れそうになってるじゃないか、ゴブリンか、コボルトか、修繕しておけ」
「（こいつ、ツンデレだけど、いい女）」

＃名前も固定しますよ。一字一句間違えないでインポートして下さいっ！
っていうときは「p3」
「p3」は。
---
import {korega_import} from "korega_import.js"
---
いわゆる、ムスタング付きで。
対応するエクスポートは。
---
function korega_import...
export {korega_import}
---
あるいは
---
export function korega_import...
---
主に、共通する変数なんかを使う場合、これはシングルトン的なパターンとか、もう、みんなこれで決めろよとか、余計なことしたくない場合、作り手のほうがな。
どういう意味かと云うと、「クラスとか関数の先頭にエクスポートつければ完成！」するからだろう。
---
function korega_import(){
 return "tuku tte mita"
}
---
を外にモジュールとして公開する時には。
---
export function korega_import() {
...
}
---
と先頭にエクスポートをつければいい。
「怠惰だな。だが簡単でよろしい」
https://i.pinimg.com/564x/fc/61/00/fc6100d3ddedd037b1a212f0eeea9949.jpg
「（隠せない胸、プライスレス）」

＃意外と何やってるかわからないｐ１
「p1」は
---
import "korega_import.js"
---
というやつ。考えずに、ジャバスクリプトインポートする？みたいな時に書きそうな感じ。
「これは簡単に書けるが、インポートって何？というのを理解していないと難しいぞ！」
まず、インポートというのは、ジャバスクリプトは、大昔にバーしか使えなかったら、名前の衝突ありきなスクリプトでした。
という歴史に起因するだろう。
じゃあ、名前の衝突を避けるためにはどうすればいいのか。まだ、このあたりでは人気が出始めのジャバスクリプトさんでしたが、ほうほうに考えた結果、出た結論。
「クロージャ！」
ということになりましたね。
クロージャーとは、関数ラッピングして、外の世界と隔絶するそれです。
といってもウィンドウはあったので、それに最終的に引っ付ける。
---
(function(root){
  function korega_import(){
 ...
 }
  root.korega_import = korega_import
})(window||this)
---
一昔前に見られたものですね。これはこれで、内部完結なので、あえて書き直す必要はないと思われる。
さて。
このｐ１は、こんなことが可能。
---
...
window.korega_import = korega_import
---
まんまだね。
「というか、互換性っぽいやつ！」
読み込んだ時に、読み込まれた先にグローバルなオブジェクトがあれば、それにひっつけますので、それで使って下さい。って感じ。
もちろん、この場合、ブラウザだとウィンドウさんはあるので、何も考えずに。
---
import "korega_import.js"
console.log("aru?",korega_import)
---
で
https://i.pinimg.com/564x/c8/58/79/c85879f573e1cb6aae259e39025ef077.jpg
「有ります！」
「（姫来た！）」


＃その他。アズ。
まず、インポートにおいて、アズは使ってはいけない。
というのが大前提。
「asはない。最終手段！」
アズインポートは、あなたが設定した名前は、わたしが書いているプログラムではもう既に別のオブジェクトとか変数とかでつかっているので、っていうか、コンフィグって名前を固定にするなよ。どう考えてもかぶりまくりだろ。「コンフィグなんて名前めっちゃつかうわ！」
みたいなときに、名前の衝突を回避するために使います。
俺様の世界ではお前が作ったコンフィグはこれな。っていうのは、こう書きます。
---
import {Config} as omaenoConfig from "Config.js"
---
「なぜデフォルトにしなかった！」
と小一時間問い詰められる感じですね。
もちろん理由はわかる。
エクスポート、複数したんだろ。しちゃったんだろ。一つのファイルにエクスポートは一つにしたほうがいいぜ。
っていう学びだな。
しかし、複数書きたくなるわ。
「しかし、こういうのは、ワイルドカードで解決！」
---
import * as mod from "Config.js"
console.log('omaenoConfig', mod.Config)
---
https://i.pinimg.com/564x/09/ec/f9/09ecf9ee1b74eebc397db167397c0556.jpg
「（魚肌！）」


＃繋がった。まだ説明していない最後のに、繋がった。
「p4」ダイレクトインポート。
---
import("Config.js").then(mod=>{
  console.log('omaenoConfig', mod.Config) 
})
---
はい、OK。
いわゆるワイルドカードっすね。
これをインポートしておいてね。なんて云われた場合は、まず動的インポートだな。
ある意味クロージャーなので、有利だし。しかし、アウェイト必要だけどな。表に出す場合は。いや、もう表にだすなよ的な解釈でもいい。
---
import("Config.js").then(main)

function main(mod){
  console.log('omaenoConfig', mod.Config) 
}
---
なんか、懐かしい感じになった。
動的インポートはエントリーポイントがわかりやすいね。
https://i.pinimg.com/564x/ab/a2/6b/aba26b5d3aaaa21b192575ae8bf0f04d.jpg
「mainさん・・・。ちっす」
