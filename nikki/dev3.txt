＃ここはDEV3。
まずそれよりも、エディタが起動した時に、データが読み取れんのが気になる。
データというのは、エディタ側がアンデファインドになる件。
これはこれでいいんだったっけ。


＃モジュール切り分けた件。
まず、モジュール切り分けた件について話そう。
モジュールというのは、このキャッチャーインザスカイの全体像のお話で。
もともと、一気にガッツリフルスクラッチしていたので、モジュールは完全にひっついていました。
そこで、まずは、何度も作って壊すのも、慣れてきたので。
「慣れてきて、いいのかはさておき」
しかし、習熟はしたので、もうそろそろ、分担するか。
ということで、
「まずはMVCだよね！」
ってことになって、モジュール？　ビュー？　コントローラー？
そもそも、ハッシュサンがコントローラーだ。
このハッシュサンは「＃」アンカーに反応して、サイトを描画し直せる。
「結局プログラムって、トリガーか！」
みたいな話だね。
サーバレスでブログ開発できる。というのが、このキャッチャーインザスカイの開発です。
次に、切り分けたのが、モジュールとビューで。
そもそも、モジュールっていうのが、あまりピンとこないな。
「ドム操作しないのがモジュール！」
だと思っているけれども。かなりの割合で、要素を作ってしまいますね。
まあ、モジュール切り分けで重要だったのは、クロージャー。現代的な、モダンなクロージャーは、ダイナミックインポート。動的インポートで。
---
const {CatchSky} = await import('CatchSky.js')
---
か、古い形のウィンドウに加えるものは、
---
await import('use.js')
---
とただ読み込めば、ウィンドウにひっつく。
これらによって、このキャッチャーインザスカイは、
レンダーインデックスと
レンダーヘルプと
レンダーキジの
三つの主要なレンダー関数、もといビューが別ファイルになって、インデックスの中身が軽量化されましたとさ。
インデックスさんが扱うのは、主にハッシュさんとキャッチャーインザスカイのメインクラスだ。
---
hashsan.start(...)
CatchSky //kaimei sitai
---
https://i.pinimg.com/564x/a2/d9/d0/a2d9d03c4e514e399ead1c00849279a7.jpg
「鬼子！」
「（なんのゲームだろ）」


＃他には、画像戻せないの？みたいな。
ああ、画像戻すのね。
クリックしたら画像が切り替わるのは、フジヤマユーティルのお仕事ですね。
フジヤマユーティルは、たぶんクリックされる度に、自分専用のスタイルタグを書き換えているはず。
---
:root{
   background-2:url(clickurl);
   /*たまにセミコロン抜ける件*/
}
---
これは、イメージタグをクリックしたらその対象の画像を上書きさせるように動くので、「イメージタグ以外をクリックしたら初期化するように！」すればいいと思われる。
ディスミスは初期化。みたいな。
ディスミス初期化か。
ディスミス初期化対応にしようか。簡単だし。


＃エンター押されて五秒後に能動セーブ。
これはやろう。エンターを押されて、しばらくエンターがなかったら、セーブに動きます。３０秒でもいいかもしれない。
基本的には、手が止まったら「勝手にセーブしときました」的なやつだね。
---
press.press('Enter',(e)=>{
  meidsave(data)
  console.log('save-sitoki-masita!')
},30*1000)
---
「メイドセーブと名付けよう！」
よし、いける。
「３０秒後にメイドセーブを発動する」
「メイドセーブのトリガーはエンターだっ！」
「（強気）」
https://i.pinimg.com/564x/ca/e5/4c/cae54c129ac1ee7117b897a345103a66.jpg
「（ナイスセンス）」


＃セーブの問題も、保存されたかどうか、もっと大きく！
これ疲れてる時とか、絶対やり過ごす。
これな、プリンター導入しよう。プリンターさんは、カラーを変えられるはず。「色で圧迫しよう右下！」
これだけで、まずはいい。
しかし、コードペンのように、最終的にセーブまだなら、引き止める機能は欲しい。
これ検討。あとでやる。


＃あとはフジヤマの問題。
「コンテンツサマリーつけない？」
これは、フジヤマはシンプルなHTMLパーサーだけど、サブタイトルはｈ１なので、それを引っ張れば可能なはず。
そして、冒頭か行末に追加する。
ぶっちゃけ両方でもいい。
https://i.pinimg.com/564x/44/7a/27/447a27614dfe9f69a85b1992b228e965.jpg
「おい、気づいてるか。フジヤマの第二引数は空いている」
「（なに、こいつ。お助けキャラっぽい、陰キャ）」


＃はてなブログのＡＰＩ叩いて、そのまま、あげない？みたいな話。
これね。長くなりそう。
たぶん一〇ページ以上書ける。ブログのネタにはもってこいだけどな。
簡単に云うと、OAUTHして、リダイレクトして、シークレットサートもらって、ヴェリファイで、アップロードしたり、情報もらったりして、期限切れたらどうするの？
みたいな。
ただ、リダイレクトのURLが大いに許可されているので、悪くはない。
「（いいのか、はてなさん）」
https://i.pinimg.com/564x/1e/26/df/1e26df8b10bd374b9db1a5404db390c7.jpg
「（この色彩センス。ウェルダン）」


＃インデックスの改修もしてない。せめて、タイトルぐらいは表示しないと。日付も有るとよい。
というのを考えると、ジストなは、なかなかよい。
なんといっても、ジストには「クリエイト時間があるからな！」
リポジトリの場合は、コミット時間が最新となるから、リポジトリのファイル取得しても、最新かどうか不明。
「一度コミットの確認大変！」
まあ、データも全部取れるからいいといえばいいのか。
オクト改修して、サマリー貰えるようにするか、いや、オクトは一ファイルのみのアップロードに特化してるからな。
これも、やらなくてもよい。
しかし、ジストにアップロードして、一覧取得して、同時にサマリーもとれるから、これ楽だわ。
というのはある。
はてブロのほうが先。
ここまで終わったら改題。
＠dev4（dev4.txt）
「（あっ、スクロールイントゥービューまだ）」
https://i.pinimg.com/564x/cb/b6/e7/cbb6e7d7f3a7bd3c6605db1de1458dc7.jpg
「（あれが、コーンドームに見えてたらおつかれ）」